// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod raikiri_wit {
    #[allow(dead_code)]
    pub mod bindings {
        #[allow(dead_code, clippy::all)]
        pub mod wasi_http {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// The HTTP status code.
            pub type HttpStatus = u16;
            /// The HTTP body.
            pub type Body = _rt::Vec<u8>;
            /// The HTTP headers represented as a list of (name, value) pairs.
            pub type Headers = _rt::Vec<(_rt::String, _rt::String)>;
            /// An HTTP request.
            #[derive(Clone)]
            pub struct Request {
                pub headers: Headers,
                pub body: Body,
            }
            impl ::core::fmt::Debug for Request {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Request")
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            /// An HTTP response.
            #[derive(Clone)]
            pub struct ModuleResponse {
                pub status: HttpStatus,
                pub headers: Headers,
                pub body: Body,
            }
            impl ::core::fmt::Debug for ModuleResponse {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ModuleResponse")
                        .field("status", &self.status)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn handle_http(req: &Request) -> ModuleResponse {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                    let Request {
                        headers: headers0,
                        body: body0,
                    } = req;
                    let vec4 = headers0;
                    let len4 = vec4.len();
                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(vec4.len() * 16, 4);
                    let result4 = if layout4.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout4);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec4.into_iter().enumerate() {
                        let base = result4.add(i * 16);
                        {
                            let (t1_0, t1_1) = e;
                            let vec2 = t1_0;
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            *base.add(4).cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                            let vec3 = t1_1;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *base.add(12).cast::<usize>() = len3;
                            *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    }
                    let vec5 = body0;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    let ptr6 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "raikiri-wit:bindings/wasi-http")]
                    extern "C" {
                        #[link_name = "handle-http"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(result4, len4, ptr5.cast_mut(), len5, ptr6);
                    let l7 = i32::from(*ptr6.add(0).cast::<u16>());
                    let l8 = *ptr6.add(4).cast::<*mut u8>();
                    let l9 = *ptr6.add(8).cast::<usize>();
                    let base16 = l8;
                    let len16 = l9;
                    let mut result16 = _rt::Vec::with_capacity(len16);
                    for i in 0..len16 {
                        let base = base16.add(i * 16);
                        let e16 = {
                            let l10 = *base.add(0).cast::<*mut u8>();
                            let l11 = *base.add(4).cast::<usize>();
                            let len12 = l11;
                            let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                            let l13 = *base.add(8).cast::<*mut u8>();
                            let l14 = *base.add(12).cast::<usize>();
                            let len15 = l14;
                            let bytes15 = _rt::Vec::from_raw_parts(l13.cast(), len15, len15);

                            (_rt::string_lift(bytes12), _rt::string_lift(bytes15))
                        };
                        result16.push(e16);
                    }
                    _rt::cabi_dealloc(base16, len16 * 16, 4);
                    let l17 = *ptr6.add(12).cast::<*mut u8>();
                    let l18 = *ptr6.add(16).cast::<usize>();
                    let len19 = l18;
                    if layout4.size() != 0 {
                        _rt::alloc::dealloc(result4.cast(), layout4);
                    }
                    ModuleResponse {
                        status: l7 as u16,
                        headers: result16,
                        body: _rt::Vec::from_raw_parts(l17.cast(), len19, len19),
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn call_module(module_name: &str, params: &Body) -> ModuleResponse {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 20]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 20]);
                    let vec0 = module_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = params;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "raikiri-wit:bindings/wasi-http")]
                    extern "C" {
                        #[link_name = "call-module"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2);
                    let l3 = i32::from(*ptr2.add(0).cast::<u16>());
                    let l4 = *ptr2.add(4).cast::<*mut u8>();
                    let l5 = *ptr2.add(8).cast::<usize>();
                    let base12 = l4;
                    let len12 = l5;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12.add(i * 16);
                        let e12 = {
                            let l6 = *base.add(0).cast::<*mut u8>();
                            let l7 = *base.add(4).cast::<usize>();
                            let len8 = l7;
                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                            let l9 = *base.add(8).cast::<*mut u8>();
                            let l10 = *base.add(12).cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                            (_rt::string_lift(bytes8), _rt::string_lift(bytes11))
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(base12, len12 * 16, 4);
                    let l13 = *ptr2.add(12).cast::<*mut u8>();
                    let l14 = *ptr2.add(16).cast::<usize>();
                    let len15 = l14;
                    ModuleResponse {
                        status: l3 as u16,
                        headers: result12,
                        body: _rt::Vec::from_raw_parts(l13.cast(), len15, len15),
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod raikiri_wit {
        #[allow(dead_code)]
        pub mod bindings {
            #[allow(dead_code, clippy::all)]
            pub mod wasi_http {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// The HTTP status code.
                pub type HttpStatus = u16;
                /// The HTTP body.
                pub type Body = _rt::Vec<u8>;
                /// The HTTP headers represented as a list of (name, value) pairs.
                pub type Headers = _rt::Vec<(_rt::String, _rt::String)>;
                /// An HTTP request.
                #[derive(Clone)]
                pub struct Request {
                    pub headers: Headers,
                    pub body: Body,
                }
                impl ::core::fmt::Debug for Request {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Request")
                            .field("headers", &self.headers)
                            .field("body", &self.body)
                            .finish()
                    }
                }
                /// An HTTP response.
                #[derive(Clone)]
                pub struct ModuleResponse {
                    pub status: HttpStatus,
                    pub headers: Headers,
                    pub body: Body,
                }
                impl ::core::fmt::Debug for ModuleResponse {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ModuleResponse")
                            .field("status", &self.status)
                            .field("headers", &self.headers)
                            .field("body", &self.body)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_handle_http_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base6 = arg0;
                    let len6 = arg1;
                    let mut result6 = _rt::Vec::with_capacity(len6);
                    for i in 0..len6 {
                        let base = base6.add(i * 16);
                        let e6 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base.add(8).cast::<*mut u8>();
                            let l4 = *base.add(12).cast::<usize>();
                            let len5 = l4;
                            let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                            (_rt::string_lift(bytes2), _rt::string_lift(bytes5))
                        };
                        result6.push(e6);
                    }
                    _rt::cabi_dealloc(base6, len6 * 16, 4);
                    let len7 = arg3;
                    let result8 = T::handle_http(Request {
                        headers: result6,
                        body: _rt::Vec::from_raw_parts(arg2.cast(), len7, len7),
                    });
                    let ptr9 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let ModuleResponse {
                        status: status10,
                        headers: headers10,
                        body: body10,
                    } = result8;
                    *ptr9.add(0).cast::<u16>() = (_rt::as_i32(status10)) as u16;
                    let vec14 = headers10;
                    let len14 = vec14.len();
                    let layout14 =
                        _rt::alloc::Layout::from_size_align_unchecked(vec14.len() * 16, 4);
                    let result14 = if layout14.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout14).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout14);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec14.into_iter().enumerate() {
                        let base = result14.add(i * 16);
                        {
                            let (t11_0, t11_1) = e;
                            let vec12 = (t11_0.into_bytes()).into_boxed_slice();
                            let ptr12 = vec12.as_ptr().cast::<u8>();
                            let len12 = vec12.len();
                            ::core::mem::forget(vec12);
                            *base.add(4).cast::<usize>() = len12;
                            *base.add(0).cast::<*mut u8>() = ptr12.cast_mut();
                            let vec13 = (t11_1.into_bytes()).into_boxed_slice();
                            let ptr13 = vec13.as_ptr().cast::<u8>();
                            let len13 = vec13.len();
                            ::core::mem::forget(vec13);
                            *base.add(12).cast::<usize>() = len13;
                            *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                        }
                    }
                    *ptr9.add(8).cast::<usize>() = len14;
                    *ptr9.add(4).cast::<*mut u8>() = result14;
                    let vec15 = (body10).into_boxed_slice();
                    let ptr15 = vec15.as_ptr().cast::<u8>();
                    let len15 = vec15.len();
                    ::core::mem::forget(vec15);
                    *ptr9.add(16).cast::<usize>() = len15;
                    *ptr9.add(12).cast::<*mut u8>() = ptr15.cast_mut();
                    ptr9
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_handle_http<T: Guest>(arg0: *mut u8) {
                    let l4 = *arg0.add(4).cast::<*mut u8>();
                    let l5 = *arg0.add(8).cast::<usize>();
                    let base6 = l4;
                    let len6 = l5;
                    for i in 0..len6 {
                        let base = base6.add(i * 16);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                            let l2 = *base.add(8).cast::<*mut u8>();
                            let l3 = *base.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(base6, len6 * 16, 4);
                    let l7 = *arg0.add(12).cast::<*mut u8>();
                    let l8 = *arg0.add(16).cast::<usize>();
                    let base9 = l7;
                    let len9 = l8;
                    _rt::cabi_dealloc(base9, len9 * 1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_call_module_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let result2 = T::call_module(
                        _rt::string_lift(bytes0),
                        _rt::Vec::from_raw_parts(arg2.cast(), len1, len1),
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let ModuleResponse {
                        status: status4,
                        headers: headers4,
                        body: body4,
                    } = result2;
                    *ptr3.add(0).cast::<u16>() = (_rt::as_i32(status4)) as u16;
                    let vec8 = headers4;
                    let len8 = vec8.len();
                    let layout8 = _rt::alloc::Layout::from_size_align_unchecked(vec8.len() * 16, 4);
                    let result8 = if layout8.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout8).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout8);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec8.into_iter().enumerate() {
                        let base = result8.add(i * 16);
                        {
                            let (t5_0, t5_1) = e;
                            let vec6 = (t5_0.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *base.add(4).cast::<usize>() = len6;
                            *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                            let vec7 = (t5_1.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *base.add(12).cast::<usize>() = len7;
                            *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                        }
                    }
                    *ptr3.add(8).cast::<usize>() = len8;
                    *ptr3.add(4).cast::<*mut u8>() = result8;
                    let vec9 = (body4).into_boxed_slice();
                    let ptr9 = vec9.as_ptr().cast::<u8>();
                    let len9 = vec9.len();
                    ::core::mem::forget(vec9);
                    *ptr3.add(16).cast::<usize>() = len9;
                    *ptr3.add(12).cast::<*mut u8>() = ptr9.cast_mut();
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_call_module<T: Guest>(arg0: *mut u8) {
                    let l4 = *arg0.add(4).cast::<*mut u8>();
                    let l5 = *arg0.add(8).cast::<usize>();
                    let base6 = l4;
                    let len6 = l5;
                    for i in 0..len6 {
                        let base = base6.add(i * 16);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                            let l2 = *base.add(8).cast::<*mut u8>();
                            let l3 = *base.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                        }
                    }
                    _rt::cabi_dealloc(base6, len6 * 16, 4);
                    let l7 = *arg0.add(12).cast::<*mut u8>();
                    let l8 = *arg0.add(16).cast::<usize>();
                    let base9 = l7;
                    let len9 = l8;
                    _rt::cabi_dealloc(base9, len9 * 1, 1);
                }
                pub trait Guest {
                    fn handle_http(req: Request) -> ModuleResponse;
                    fn call_module(module_name: _rt::String, params: Body) -> ModuleResponse;
                }
                #[doc(hidden)]

                macro_rules! __export_raikiri_wit_bindings_wasi_http_cabi{
      ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

        #[export_name = "raikiri-wit:bindings/wasi-http#handle-http"]
        unsafe extern "C" fn export_handle_http(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
          $($path_to_types)*::_export_handle_http_cabi::<$ty>(arg0, arg1, arg2, arg3)
        }
        #[export_name = "cabi_post_raikiri-wit:bindings/wasi-http#handle-http"]
        unsafe extern "C" fn _post_return_handle_http(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_handle_http::<$ty>(arg0)
        }
        #[export_name = "raikiri-wit:bindings/wasi-http#call-module"]
        unsafe extern "C" fn export_call_module(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
          $($path_to_types)*::_export_call_module_cabi::<$ty>(arg0, arg1, arg2, arg3)
        }
        #[export_name = "cabi_post_raikiri-wit:bindings/wasi-http#call-module"]
        unsafe extern "C" fn _post_return_call_module(arg0: *mut u8,) {
          $($path_to_types)*::__post_return_call_module::<$ty>(arg0)
        }
      };);
    }
                #[doc(hidden)]
                pub(crate) use __export_raikiri_wit_bindings_wasi_http_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 20]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 20]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_bindings_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::raikiri_wit::bindings::wasi_http::__export_raikiri_wit_bindings_wasi_http_cabi!($ty with_types_in $($path_to_types_root)*::exports::raikiri_wit::bindings::wasi_http);
  )
}
#[doc(inline)]
pub(crate) use __export_bindings_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:bindings:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 641] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x82\x04\x01A\x02\x01\
A\x04\x01B\x0f\x01{\x04\0\x0bhttp-status\x03\0\0\x01p}\x04\0\x04body\x03\0\x02\x01\
o\x02ss\x01p\x04\x04\0\x07headers\x03\0\x05\x01r\x02\x07headers\x06\x04body\x03\x04\
\0\x07request\x03\0\x07\x01r\x03\x06status\x01\x07headers\x06\x04body\x03\x04\0\x0f\
module-response\x03\0\x09\x01@\x01\x03req\x08\0\x0a\x04\0\x0bhandle-http\x01\x0b\
\x01@\x02\x0bmodule-names\x06params\x03\0\x0a\x04\0\x0bcall-module\x01\x0c\x03\x01\
\x1eraikiri-wit:bindings/wasi-http\x05\0\x01B\x0f\x01{\x04\0\x0bhttp-status\x03\0\
\0\x01p}\x04\0\x04body\x03\0\x02\x01o\x02ss\x01p\x04\x04\0\x07headers\x03\0\x05\x01\
r\x02\x07headers\x06\x04body\x03\x04\0\x07request\x03\0\x07\x01r\x03\x06status\x01\
\x07headers\x06\x04body\x03\x04\0\x0fmodule-response\x03\0\x09\x01@\x01\x03req\x08\
\0\x0a\x04\0\x0bhandle-http\x01\x0b\x01@\x02\x0bmodule-names\x06params\x03\0\x0a\
\x04\0\x0bcall-module\x01\x0c\x04\x01\x1eraikiri-wit:bindings/wasi-http\x05\x01\x04\
\x01\x1draikiri-wit:bindings/bindings\x04\0\x0b\x0e\x01\0\x08bindings\x03\0\0\0G\
\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen\
-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
